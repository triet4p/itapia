create table if not exists public.exchanges (
	exchange_code varchar(15) primary key,
	exchange_name varchar(300) null,
	currency varchar(7) not null,
	timezone varchar(60) not null,
	country varchar(50) not null,
    open_time time without time zone,
    close_time time without time zone
);

create table if not exists public.sectors (
	sector_code varchar(7) primary key,
	sector_name varchar(50) null
);

create table if not exists public.tickers (
	ticker_sym varchar(10) primary key,
	company_name varchar(255) null,
	exchange_code varchar(15) not null,
	sector_code varchar(7) not null,
	is_active boolean null default TRUE,
	
	foreign key (exchange_code) references exchanges(exchange_code),
	foreign key (sector_code) references sectors(sector_code)
);

CREATE TABLE IF NOT EXISTS public.daily_prices ( 
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "open" float4 NULL, high float4 NULL, 
    low float4 NULL, "close" float4 NULL, 
    volume float4 NULL, ticker varchar(10) NOT NULL, 
    collect_date timestamp with time zone NOT NULL, 
    foreign key (ticker) references tickers(ticker_sym),
    CONSTRAINT daily_prices_unique UNIQUE (ticker, collect_date)
);

CREATE TABLE IF NOT EXISTS public.relevant_news ( 
    news_uuid varchar(256) PRIMARY KEY,
    ticker varchar(10) not null,
    title TEXT not null,
    summary TEXT null,
    provider varchar(150) null,
    link TEXT null,
    publish_time timestamp with time zone null,
    collect_time timestamp with time zone not null,
    foreign key (ticker) references tickers(ticker_sym)
);

CREATE TABLE IF NOT EXISTS public.universal_news ( 
    news_uuid varchar(256) PRIMARY KEY,
    keyword varchar(150) not null,
    keyword_tsv tsvector not null,
    title TEXT not null,
    summary TEXT null,
    provider varchar(150) null,
    link TEXT null,
    publish_time timestamp with time zone null,
    collect_time timestamp with time zone not null,
    title_hash varchar(100) NOT null,
    news_prior int NOT NULL
);

ALTER TABLE public.universal_news ADD CONSTRAINT universal_news_unique UNIQUE (title_hash);

CREATE TRIGGER tsvectorupdate BEFORE INSERT OR UPDATE
ON universal_news FOR EACH ROW EXECUTE PROCEDURE
tsvector_update_trigger(keyword_tsv, 'pg_catalog.english', keyword);

CREATE INDEX daily_prices_ticker ON public.daily_prices(ticker);
CREATE INDEX relevant_news_ticker ON public.relevant_news(ticker);
CREATE INDEX keyword_tsv_idx ON universal_news USING GIN(keyword_tsv);

-- Thêm vào cuối file db/ddl.sql

CREATE TABLE IF NOT EXISTS rules (
    rule_id VARCHAR(255) PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    purpose VARCHAR(30),
    version INT NOT NULL DEFAULT 1,
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    
    -- Cột quan trọng nhất, lưu toàn bộ định nghĩa Rule
    -- bao gồm cả metadata và cây logic (root)
    root JSONB NOT NULL,
    
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Tạo một trigger để tự động cập nhật updated_at
CREATE OR REPLACE FUNCTION trigger_set_timestamp()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER set_timestamp
BEFORE UPDATE ON rules
FOR EACH ROW
EXECUTE PROCEDURE trigger_set_timestamp();

-- (Tùy chọn nhưng khuyến khích) Đánh chỉ mục trên cột JSONB để tăng tốc truy vấn
-- Ví dụ: Đánh chỉ mục trên trường "purpose" bên trong JSON
CREATE INDEX idx_rules_purpose ON rules(purpose);

CREATE EXTENSION IF NOT EXISTS "uuid-ossp";


-- Tạo bảng users
CREATE TABLE IF NOT EXISTS users (
    --id SERIAL PRIMARY KEY,                          -- ID tự tăng, đơn giản cho đồ án
    user_id VARCHAR(256) PRIMARY KEY, -- Cách làm chuyên nghiệp hơn
    
    email VARCHAR(255) UNIQUE NOT NULL,             -- Email phải là duy nhất
    google_id VARCHAR(255) UNIQUE,                  -- ID từ Google để liên kết
    
    full_name VARCHAR(255),
    avatar_url TEXT,                                -- TEXT để chứa URL dài
    
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    
    -- Dùng TIMESTAMPTZ để lưu múi giờ UTC, rất quan trọng
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Tạo một index trên google_id để tăng tốc độ tìm kiếm
CREATE INDEX IF NOT EXISTS idx_users_google_id ON users(google_id);


CREATE TABLE IF NOT EXISTS investment_profiles (
    profile_id VARCHAR(255) PRIMARY KEY,
    user_id VARCHAR(255) NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
    
    profile_name VARCHAR(100) NOT NULL,
    description TEXT,
    
    -- 5 cột JSONB để lưu trữ các "part"
    risk_tolerance JSONB NOT NULL,
    invest_goal JSONB NOT NULL,
    knowledge_exp JSONB NOT NULL,
    capital_income JSONB NOT NULL,
    personal_prefer JSONB NOT NULL,
    
    -- Các trường config được tách ra để truy vấn hiệu quả
    use_in_advisor BOOLEAN NOT NULL DEFAULT TRUE,
    is_default BOOLEAN NOT NULL DEFAULT FALSE,
    
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    
    -- Đảm bảo tên hồ sơ là duy nhất cho mỗi người dùng
    UNIQUE (user_id, profile_name)
);

-- Index trên khóa ngoại để tăng tốc độ truy vấn theo user
CREATE INDEX IF NOT EXISTS idx_investment_profiles_user_id ON investment_profiles(user_id);

-- Trigger để giới hạn 10 hồ sơ mỗi người dùng (giữ nguyên)
-- Lưu ý: Function check_profile_limit() cần được tạo trước trigger này.
CREATE OR REPLACE FUNCTION check_profile_limit()
RETURNS TRIGGER AS $$
BEGIN
    IF (SELECT count(*) FROM investment_profiles WHERE user_id = NEW.user_id) >= 10 THEN
        RAISE EXCEPTION 'User cannot have more than 10 investment profiles.';
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Xóa trigger cũ nếu tồn tại để tránh lỗi
DROP TRIGGER IF EXISTS enforce_profile_limit ON investment_profiles;

CREATE TRIGGER enforce_profile_limit
BEFORE INSERT ON investment_profiles
FOR EACH ROW EXECUTE FUNCTION check_profile_limit();
