/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/market/tickers/{ticker}/prices/daily": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get daily historical price data for a stock ticker
         * @description Get daily historical price data for a stock ticker.
         *
         *     Args:
         *         ticker (str): Stock ticker symbol
         *         skip (int): Number of records to skip (for pagination)
         *         limit (int): Maximum number of records to return
         *         prices_service (APIPricesService): Prices service dependency
         *
         *     Returns:
         *         PriceResponse: Daily historical price data
         */
        get: operations["get_daily_prices_api_v1_market_tickers__ticker__prices_daily_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/market/sectors/{sector}/prices/daily": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get daily price data for all stocks in a sector
         * @description Get daily price data for all stocks in a sector.
         *
         *     Args:
         *         sector (str): Sector name
         *         skip (int): Number of records to skip (for pagination)
         *         limit (int): Maximum number of records to return
         *         prices_service (APIPricesService): Prices service dependency
         *
         *     Returns:
         *         list[PriceResponse]: Daily price data for all stocks in the sector
         */
        get: operations["get_daily_prices_by_sector_api_v1_market_sectors__sector__prices_daily_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/market/tickers/{ticker}/prices/intraday": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get intraday price history for a stock ticker
         * @description Get intraday price history for a stock ticker.
         *
         *     Args:
         *         ticker (str): Stock ticker symbol
         *         prices_service (APIPricesService): Prices service dependency
         *         latest_only (bool): If True, return only the latest intraday data
         *
         *     Returns:
         *         PriceResponse: Intraday price history
         */
        get: operations["get_intraday_prices_api_v1_market_tickers__ticker__prices_intraday_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/market/tickers/{ticker}/news": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get recent news for a stock ticker
         * @description Get recent news for a stock ticker.
         *
         *     Args:
         *         ticker (str): Stock ticker symbol
         *         skip (int): Number of records to skip (for pagination)
         *         limit (int): Maximum number of records to return
         *         news_service (APINewsService): News service dependency
         *
         *     Returns:
         *         RelevantNewsResponse: Recent news for the stock ticker
         */
        get: operations["get_relevant_news_api_v1_market_tickers__ticker__news_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/market/news/universal": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get recent news based on search terms
         * @description Get recent news based on search terms.
         *
         *     Args:
         *         search_terms (str): Search terms to filter news
         *         skip (int): Number of records to skip (for pagination)
         *         limit (int): Maximum number of records to return
         *         news_service (APINewsService): News service dependency
         *
         *     Returns:
         *         UniversalNewsResponse: Recent news based on search terms
         */
        get: operations["get_universal_news_api_v1_market_news_universal_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/metadata/sectors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get list of all supported sectors
         * @description Get list of all supported sectors.
         *
         *     Args:
         *         metadata_service (APIMetadataService): Metadata service dependency
         *
         *     Returns:
         *         list[SectorMetadataResponse]: List of all supported sectors
         */
        get: operations["get_all_sectors_api_v1_metadata_sectors_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/analysis/quick/{ticker}/full": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get full market analysis report from AI Quick Service
         * @description Get full market analysis report from AI Quick Service.
         *
         *     Args:
         *         ticker (str): Stock ticker symbol
         *         daily_analysis_type (Literal['short', 'medium', 'long']): Daily analysis time frame
         *         required_type (Literal['daily', 'intraday', 'all']): Type of analysis to include
         *
         *     Returns:
         *         QuickCheckReportResponse: Complete market analysis report
         */
        get: operations["get_ai_full_quick_analysis_api_v1_analysis_quick__ticker__full_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/analysis/quick/{ticker}/technical": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get technical analysis report from AI Quick Service
         * @description Get technical analysis report from AI Quick Service.
         *
         *     Args:
         *         ticker (str): Stock ticker symbol
         *         daily_analysis_type (Literal['short', 'medium', 'long']): Daily analysis time frame
         *         required_type (Literal['daily', 'intraday', 'all']): Type of analysis to include
         *
         *     Returns:
         *         TechnicalReportResponse: Technical analysis report
         */
        get: operations["get_ai_technical_quick_analysis_api_v1_analysis_quick__ticker__technical_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/analysis/quick/{ticker}/forecasting": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get forecasting analysis report from AI Quick Service
         * @description Get forecasting analysis report from AI Quick Service.
         *
         *     Args:
         *         ticker (str): Stock ticker symbol
         *
         *     Returns:
         *         ForecastingReportResponse: Forecasting analysis report
         */
        get: operations["get_ai_forecasting_quick_analysis_api_v1_analysis_quick__ticker__forecasting_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/analysis/quick/{ticker}/news": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get news analysis report from AI Quick Service
         * @description Get news analysis report from AI Quick Service.
         *
         *     Args:
         *         ticker (str): Stock ticker symbol
         *
         *     Returns:
         *         NewsReportResponse: News analysis report
         */
        get: operations["get_ai_news_quick_analysis_api_v1_analysis_quick__ticker__news_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/analysis/quick/{ticker}/explain": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get natural language explanation of market analysis from AI Quick Service
         * @description Get natural language explanation of market analysis from AI Quick Service.
         *
         *     Args:
         *         ticker (str): Stock ticker symbol
         *         daily_analysis_type (Literal['short', 'medium', 'long']): Daily analysis time frame
         *         required_type (Literal['daily', 'intraday', 'all']): Type of analysis to include
         *         explain_type (Literal['technical', 'news', 'forecasting', 'all']): Type of explanation to generate
         *
         *     Returns:
         *         str: Natural language explanation of market analysis
         */
        get: operations["get_ai_quick_analysis_plain_api_v1_analysis_quick__ticker__explain_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/advisor/quick/{ticker}/full": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get full advisor report from AI Quick Service
         * @description Get full advisor report from AI Quick Service.
         *
         *     Args:
         *         quantitive_config (QuantitivePreferencesConfigRequest): Quantitative preferences configuration
         *         ticker (str): Stock ticker symbol
         *         limit (int): Maximum number of rules to include in the report
         *
         *     Returns:
         *         AdvisorResponse: Complete advisor report with recommendations
         */
        post: operations["get_ai_full_quick_advisor_api_v1_advisor_quick__ticker__full_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/advisor/quick/{ticker}/explain": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get natural language explanation of advisor recommendations from AI Quick Service
         * @description Get natural language explanation of advisor recommendations from AI Quick Service.
         *
         *     Args:
         *         quantitive_config (QuantitivePreferencesConfigRequest): Quantitative preferences configuration
         *         ticker (str): Stock ticker symbol
         *         limit (int): Maximum number of rules to include in the explanation
         *
         *     Returns:
         *         str: Natural language explanation of advisor recommendations
         */
        post: operations["get_ai_full_quick_advisor_explain_api_v1_advisor_quick__ticker__explain_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/rules/{rule_id}/explain": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get explanation for a specific rule from AI Service
         * @description Get explanation for a specific rule from AI Service.
         *
         *     Args:
         *         rule_id (str): ID of the rule to explain
         *
         *     Returns:
         *         ExplainationRuleResponse: Rule with natural language explanation
         */
        get: operations["get_ai_single_rule_explain_api_v1_rules__rule_id__explain_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/rules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get list of ready rules from AI Service
         * @description Get list of ready rules from AI Service.
         *
         *     Args:
         *         purpose (SemanticType): Filter rules by purpose
         *
         *     Returns:
         *         list[RuleResponse]: List of ready rules
         */
        get: operations["get_ai_ready_rules_api_v1_rules_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/rules/nodes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get list of available nodes from AI Service
         * @description Get list of available nodes from AI Service.
         *
         *     Args:
         *         node_type (NodeType): Filter nodes by type
         *         purpose (SemanticType): Filter nodes by purpose
         *
         *     Returns:
         *         list[NodeResponse]: List of available nodes
         */
        get: operations["get_ai_nodes_api_v1_rules_nodes_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/google/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Google OAuth authorization URL
         * @description Get Google OAuth authorization URL.
         *
         *     Returns:
         *         AuthorizationURLResponse: Google OAuth authorization URL
         */
        get: operations["google_login_api_v1_auth_google_login_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/google/callback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Handle Google OAuth callback and generate JWT token
         * @description Handle Google OAuth callback and generate JWT token.
         *
         *     Args:
         *         code (str): Authorization code from Google OAuth
         *         user_service (UserService): User service dependency
         *
         *     Returns:
         *         RedirectResponse: Redirect to frontend with JWT token or error message
         */
        get: operations["google_callback_api_v1_auth_google_callback_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get current user information
         * @description Get current user information.
         *
         *     Args:
         *         current_user (UserEntity): Current authenticated user
         *
         *     Returns:
         *         UserResponse: Current user information
         */
        get: operations["get_me_api_v1_users_me_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/profiles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all investment profiles for the current user
         * @description Get all investment profiles for the current logged-in user.
         *
         *     Args:
         *         profile_service (ProfileService): Profile service dependency
         *         current_user (UserEntity): Current authenticated user
         *
         *     Returns:
         *         List[ProfileResponse]: List of user's investment profiles
         */
        get: operations["get_user_profiles_api_v1_profiles_get"];
        put?: never;
        /**
         * Create a new investment profile for the current user
         * @description Create a new investment profile for the current logged-in user.
         *
         *     Args:
         *         profile_in (ProfileCreateRequest): Profile creation request data
         *         profile_service (ProfileService): Profile service dependency
         *         current_user (UserEntity): Current authenticated user
         *
         *     Returns:
         *         ProfileResponse: Created profile data
         */
        post: operations["create_user_profile_api_v1_profiles_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/profiles/{profile_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get details of a specific investment profile
         * @description Get details of a specific investment profile.
         *
         *     Args:
         *         profile_id (str): ID of the profile to retrieve
         *         profile_service (ProfileService): Profile service dependency
         *         current_user (UserEntity): Current authenticated user
         *
         *     Returns:
         *         ProfileResponse: Requested profile data
         */
        get: operations["get_user_profile_details_api_v1_profiles__profile_id__get"];
        /**
         * Update an existing investment profile
         * @description Update an existing investment profile.
         *
         *     Args:
         *         profile_id (str): ID of the profile to update
         *         profile_in (ProfileUpdateRequest): Profile update request data
         *         profile_service (ProfileService): Profile service dependency
         *         current_user (UserEntity): Current authenticated user
         *
         *     Returns:
         *         ProfileResponse: Updated profile data
         */
        put: operations["update_user_profile_api_v1_profiles__profile_id__put"];
        post?: never;
        /**
         * Delete an investment profile
         * @description Delete an investment profile.
         *
         *     Args:
         *         profile_id (str): ID of the profile to delete
         *         profile_service (ProfileService): Profile service dependency
         *         current_user (UserEntity): Current authenticated user
         *
         *     Returns:
         *         ProfileResponse: Deleted profile data
         */
        delete: operations["delete_user_profile_api_v1_profiles__profile_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Read Root
         * @description Root endpoint that returns a welcome message.
         *
         *     Returns:
         *         dict: A welcome message for the ITAPIA API Service
         */
        get: operations["read_root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/personal/suggested_config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get suggested quantitative preferences configuration from AI Service
         * @description Get suggested quantitative preferences configuration from AI Service.
         *
         *     Args:
         *         profile (ProfileRequest): User investment profile
         *
         *     Returns:
         *         QuantitivePreferencesConfigResponse: Suggested quantitative preferences configuration
         */
        post: operations["get_ai_suggest_config_api_v1_personal_suggested_config_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * Action
         * @description Action to take based on analysis results.
         */
        Action: {
            /**
             * Action Type
             * @enum {string}
             */
            action_type: "BUY" | "SELL" | "HOLD";
            /**
             * Position Size Pct
             * @description Percentage of capital to use for this action
             * @default 1
             */
            position_size_pct: number;
            /**
             * Duration Days
             * @description Hold time if no other exit signal
             * @default 365
             */
            duration_days: number;
            /**
             * Sl Pct
             * @description Stop Loss Percentage, 0.1 is (1-0.1)=0.9 of now price
             * @default 1
             */
            sl_pct: number;
            /**
             * Tp Pct
             * @description Take Profit Percentage, 0.1 is (1+0.1)=1.1 of now price
             * @default 1
             */
            tp_pct: number;
        };
        /**
         * AdvisorResponse
         * @description Response schema for advisor reports.
         */
        AdvisorResponse: {
            /** @description Final Decision recommendation. */
            final_decision: components["schemas"]["FinalRecommendation"];
            /** @description Final Risk assessment. */
            final_risk: components["schemas"]["FinalRecommendation"];
            /** @description Final Opportunity assessment. */
            final_opportunity: components["schemas"]["FinalRecommendation"];
            /** @description Final mapped action */
            final_action: components["schemas"]["Action"];
            /** @description Aggregated scores before going through MetaRule. */
            aggregated_scores: components["schemas"]["AggregatedScoreInfo"];
            /**
             * Ticker
             * @description Stock symbol being analyzed.
             */
            ticker: string;
            /**
             * Generated At Utc
             * @description Report generation time (ISO format).
             */
            generated_at_utc: string;
            /**
             * Generated Timestamp
             * @description Generated with timestamp
             */
            generated_timestamp: number;
        };
        /**
         * AggregatedScoreInfo
         * @description Information about scores aggregated from rule sets.
         */
        AggregatedScoreInfo: {
            /**
             * Raw Decision Score
             * @description Raw decision score, -1 is immediate sell, 1 is very strong buy, range from -1 to 1
             */
            raw_decision_score: number;
            /**
             * Raw Risk Score
             * @description Raw risk score, 0 is no risk, 1 is very high risk, range from 0 to 1.
             */
            raw_risk_score: number;
            /**
             * Raw Opportunity Score
             * @description Raw opportunity score, 0 is no opportunity, 1 is very high opportunity, range from 0 to 1.
             */
            raw_opportunity_score: number;
        };
        /**
         * AuthorizationURLResponse
         * @description Response schema for authorization URL.
         */
        AuthorizationURLResponse: {
            /** Authorization Url */
            authorization_url: string;
        };
        /**
         * BaseSHAPExplaination
         * @description Base SHAP explanation schema.
         */
        BaseSHAPExplaination: {
            /**
             * Base Value
             * @description Average predicted value (normalized log-odds or percent).
             */
            base_value: number;
            /**
             * Prediction Outcome
             * @description Final forecast result after adding all contributions.
             */
            prediction_outcome: number;
            /**
             * Top Features
             * @description List of most influential features.
             */
            top_features: components["schemas"]["TopFeature"][];
        };
        /**
         * BehaviorModifiers
         * @description Parameters to MODIFY the final trading behavior.
         */
        BehaviorModifiers: {
            /**
             * Position Sizing Factor
             * @description Factor to scale position size. 1.0 is default.
             * @default 1
             */
            position_sizing_factor: number;
            /**
             * Risk Tolerance Factor
             * @description Factor to adjust risk parameters like Stop-Loss. >1.0 means higher risk tolerance.
             * @default 1
             */
            risk_tolerance_factor: number;
        };
        /**
         * CapitalIncomePart
         * @description Capital and income profile part.
         */
        CapitalIncomePart: {
            /**
             * Initial Capital
             * @description Initial capital for this profile.
             */
            initial_capital: number;
            /**
             * Income Dependency
             * @description Degree of dependence on investment income.
             * @enum {string}
             */
            income_dependency: "low" | "medium" | "high";
        };
        /**
         * CurrentStatusReport
         * @description Current market status report.
         */
        CurrentStatusReport: {
            /**
             * Vwap Status
             * @description Comparison between VWAP-D and current price
             * @enum {string}
             */
            vwap_status: "above" | "below" | "undefined";
            /**
             * Open Status
             * @description Comparison between current price and open price
             * @enum {string}
             */
            open_status: "above" | "below";
            /**
             * Rsi Status
             * @description RSI Status
             * @enum {string}
             */
            rsi_status: "overbought" | "oversold" | "neutral";
            /**
             * Evidence
             * @description A dictionary describing evidence of status analysis
             */
            evidence: {
                [key: string]: unknown;
            };
        };
        /**
         * DailyAnalysisReport
         * @description Complete daily technical analysis report.
         */
        DailyAnalysisReport: {
            /** @description Some important key indicators for mid-term and long-term */
            key_indicators: components["schemas"]["KeyIndicators"];
            /** @description Trend report */
            trend_report: components["schemas"]["TrendReport"];
            /** @description Support/Resistance report */
            sr_report: components["schemas"]["SRReport"];
            /** @description Pattern Report */
            pattern_report: components["schemas"]["PatternReport"];
        };
        /**
         * ExplainationRuleResponse
         * @description Rule response with explanation.
         */
        ExplainationRuleResponse: {
            /** Rule Id */
            rule_id: string;
            /** Name */
            name: string;
            purpose: components["schemas"]["SemanticType"];
            rule_status: components["schemas"]["RuleStatus"];
            /** Created At Ts */
            created_at_ts: number;
            root: components["schemas"]["NodeEntity"];
            metrics?: components["schemas"]["PerformanceMetrics"] | null;
            /** Explain */
            explain: string;
        };
        /**
         * FinalRecommendation
         * @description Information about the final recommendation after all layers.
         */
        FinalRecommendation: {
            /**
             * Final Score
             * @description Final score after aggregation and personalization.
             */
            final_score: number;
            /** Purpose */
            purpose: string;
            /** Label */
            label: string;
            /**
             * Final Recommend
             * @description Final recommendation
             */
            final_recommend: string;
            /**
             * Triggered Rules
             * @description List of triggered rules that contributed to the result.
             */
            triggered_rules: components["schemas"]["TriggeredRuleInfo"][];
        };
        /**
         * ForecastingReport
         * @description Complete forecasting report for a ticker.
         */
        ForecastingReport: {
            /**
             * Ticker
             * @description Ticker symbol for forecasting
             */
            ticker: string;
            /**
             * Sector
             * @description Sector of ticker
             */
            sector: string;
            /**
             * Forecasts
             * @description List of forecasting each single task
             */
            forecasts: components["schemas"]["SingleTaskForecastReport"][];
        };
        /**
         * ForecastingReportResponse
         * @description Response schema for forecasting reports.
         */
        ForecastingReportResponse: {
            /**
             * Ticker
             * @description Ticker symbol for forecasting
             */
            ticker: string;
            /**
             * Sector
             * @description Sector of ticker
             */
            sector: string;
            /**
             * Forecasts
             * @description List of forecasting each single task
             */
            forecasts: components["schemas"]["SingleTaskForecastReport"][];
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * ImpactAssessmentReport
         * @description Impact assessment results.
         */
        ImpactAssessmentReport: {
            /**
             * Level
             * @description Level of impact
             * @enum {string}
             */
            level: "low" | "moderate" | "high" | "unknown";
            /**
             * Words
             * @description List of evidence impact words
             */
            words?: string[];
        };
        /**
         * IntradayAnalysisReport
         * @description Complete intraday technical analysis report.
         */
        IntradayAnalysisReport: {
            /** @description Status report */
            current_status_report: components["schemas"]["CurrentStatusReport"];
            /** @description Momentum report */
            momentum_report: components["schemas"]["MomentumReport"];
            /** @description Key levels */
            key_levels: components["schemas"]["KeyLevelsReport"];
        };
        /**
         * InvestGoalPart
         * @description Investment goal profile part.
         */
        InvestGoalPart: {
            /**
             * Primary Goal
             * @description The primary goal of this investment profile.
             * @enum {string}
             */
            primary_goal: "capital_preservation" | "income_generation" | "capital_growth" | "speculation";
            /**
             * Investment Horizon
             * @description The expected investment time frame.
             * @enum {string}
             */
            investment_horizon: "short_term" | "mid_term" | "long_term";
            /**
             * Expected Annual Return Pct
             * @description Expected annual rate of return (%)
             */
            expected_annual_return_pct: number;
        };
        /**
         * KeyIndicators
         * @description Key technical indicators.
         */
        KeyIndicators: {
            /** Sma 20 */
            sma_20: number | null;
            /** Sma 50 */
            sma_50: number | null;
            /** Sma 200 */
            sma_200: number | null;
            /** Rsi 14 */
            rsi_14: number | null;
            /** Adx 14 */
            adx_14: number | null;
            /** Dmp 14 */
            dmp_14: number | null;
            /** Dmn 14 */
            dmn_14: number | null;
            /** Bbu 20 */
            bbu_20: number | null;
            /** Bbl 20 */
            bbl_20: number | null;
            /** Atr 14 */
            atr_14: number | null;
            /** Psar */
            psar: number | null;
        };
        /**
         * KeyLevelsReport
         * @description Key levels report.
         */
        KeyLevelsReport: {
            /** Day High */
            day_high: number;
            /** Day Low */
            day_low: number;
            /** Open Price */
            open_price: number;
            /** Vwap */
            vwap: number | null;
            /** Or 30M High */
            or_30m_high: number | null;
            /** Or 30M Low */
            or_30m_low: number | null;
        };
        /**
         * KeywordHighlightingReport
         * @description Keyword highlighting results.
         */
        KeywordHighlightingReport: {
            /**
             * Positive Keywords
             * @description List of positive keywords highlighted
             */
            positive_keywords: string[];
            /**
             * Negative Keywords
             * @description List of negative keywords highlighted
             */
            negative_keywords: string[];
        };
        /**
         * KnowledgeExpPart
         * @description Knowledge and experience profile part.
         */
        KnowledgeExpPart: {
            /**
             * Investment Knowledge
             * @description Level of knowledge of financial markets.
             * @enum {string}
             */
            investment_knowledge: "beginner" | "intermediate" | "advanced" | "expert";
            /**
             * Years Of Experience
             * @description Number of years of investment experience.
             */
            years_of_experience: number;
        };
        /**
         * LongTermTrendReport
         * @description Long-term trend report.
         */
        LongTermTrendReport: {
            /**
             * Ma Direction
             * @description Direction using MA indicators
             * @enum {string}
             */
            ma_direction: "uptrend" | "downtrend" | "undefined";
            /**
             * Ma Status
             * @description Status using MA indicators and latest close price
             * @enum {string}
             */
            ma_status: "positive" | "negative" | "undefined";
            /**
             * Evidence
             * @description A dictionary describing evidence of trend analysis
             */
            evidence: {
                [key: string]: unknown;
            };
        };
        /**
         * MidTermTrendReport
         * @description Mid-term trend report.
         */
        MidTermTrendReport: {
            /**
             * Ma Direction
             * @description Direction using MA indicators
             * @enum {string}
             */
            ma_direction: "uptrend" | "downtrend" | "undefined";
            /**
             * Ma Status
             * @description Status using MA indicators and latest close price
             * @enum {string}
             */
            ma_status: "positive" | "negative" | "undefined";
            /**
             * Evidence
             * @description A dictionary describing evidence of trend analysis
             */
            evidence: {
                [key: string]: unknown;
            };
            /**
             * Adx Direction
             * @description Direction using ADX indicators
             * @enum {string}
             */
            adx_direction: "uptrend" | "downtrend" | "undefined";
        };
        /**
         * MomentumReport
         * @description Momentum analysis report.
         */
        MomentumReport: {
            /**
             * Macd Crossover
             * @description Decide relationship of MACD and Signal line
             * @enum {string}
             */
            macd_crossover: "bull" | "bear" | "neutral";
            /**
             * Volume Status
             * @description Decide if volume spike ratio > 2.0
             * @enum {string}
             */
            volume_status: "normal" | "high-spike";
            /**
             * Opening Range Status
             * @description Opening Range breakout
             * @enum {string}
             */
            opening_range_status: "bull-breakout" | "bear-breakdown" | "inside";
            /**
             * Evidence
             * @description A dictionary describing evidence of momentum analysis
             */
            evidence: {
                [key: string]: unknown;
            };
        };
        /**
         * NDaysDistributionTaskMetadata
         * @description Metadata for N-days distribution task.
         */
        NDaysDistributionTaskMetadata: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            problem_id: "ndays-distribution";
            /**
             * Targets
             * @description Targets of task, need to plain, example target_tb_15d_2tp_1sl
             */
            targets: string[];
            /**
             * Units
             * @description Units of target
             */
            units: string;
            /**
             * Horizon
             * @description Window for look for distribution (mean/std/min/max/q25/q75)
             */
            horizon: number;
        };
        /**
         * NERElement
         * @description Named Entity Recognition element.
         */
        NERElement: {
            /**
             * Entity Group
             * @description Name of entity group
             */
            entity_group: string;
            /**
             * Word
             * @description Word recognized
             */
            word: string;
        };
        /**
         * NERReport
         * @description Named Entity Recognition report.
         */
        NERReport: {
            /**
             * Entities
             * @description List of entities
             */
            entities: components["schemas"]["NERElement"][];
        };
        /**
         * NewsAnalysisReport
         * @description Complete news analysis report for a ticker.
         */
        NewsAnalysisReport: {
            /** Ticker */
            ticker: string;
            /** Reports */
            reports: components["schemas"]["SingleNewsAnalysisReport"][];
            summary: components["schemas"]["SummaryReport"];
        };
        /**
         * NewsReportResponse
         * @description Response schema for news analysis reports.
         */
        NewsReportResponse: {
            /** Ticker */
            ticker: string;
            /** Reports */
            reports: components["schemas"]["SingleNewsAnalysisReport"][];
            summary: components["schemas"]["SummaryReport"];
        };
        /**
         * NodeEntity
         * @description Node entity in a rule tree.
         */
        NodeEntity: {
            /** Node Name */
            node_name: string;
            /** Children */
            children?: components["schemas"]["NodeEntity"][] | null;
        };
        /**
         * NodeResponse
         * @description Response schema for node specification entities.
         */
        NodeResponse: {
            /** Node Name */
            node_name: string;
            /** Description */
            description: string;
            node_type: components["schemas"]["NodeType"];
            /** @description Return type of a node */
            return_type: components["schemas"]["SemanticType"];
            /**
             * Args Type
             * @description Argument type, only needed for operator node
             */
            args_type?: components["schemas"]["SemanticType"][] | null;
        };
        /**
         * NodeType
         * @description Type of node in a rule tree.
         * @enum {string}
         */
        NodeType: "constant" | "variable" | "operator" | "any";
        /**
         * OverallStrengthTrendReport
         * @description Overall trend strength report.
         */
        OverallStrengthTrendReport: {
            /**
             * Strength
             * @description Overall strength of trend
             * @enum {string}
             */
            strength: "strong" | "moderate" | "weak" | "undefined";
            /**
             * Value
             * @description Value of overall strength
             */
            value: number;
        };
        /**
         * PatternObj
         * @description Pattern object.
         */
        PatternObj: {
            /**
             * Name
             * @description Friendly name of patterns
             */
            name: string;
            /**
             * Pattern Type
             * @description Identify that this is chart patterns or candlestick patterns
             * @enum {string}
             */
            pattern_type: "chart" | "candlestick";
            /**
             * Sentiment
             * @description Identify the meaning of patterns is BULL or BEAR
             * @enum {string}
             */
            sentiment: "bull" | "bear" | "neutral";
            /**
             * Score
             * @description Score each pattern rewarded
             */
            score: number;
            /**
             * Confirmation Date
             * @description ISO Format string to describe confirmation date of this pattern
             */
            confirmation_date: string;
            /**
             * Evidence
             * @description A dictionary describing evidence of a recognized pattern
             */
            evidence: {
                [key: string]: unknown;
            };
        };
        /**
         * PatternReport
         * @description Pattern recognition report.
         */
        PatternReport: {
            /**
             * History Window
             * @description History window to view data
             * @default 90
             */
            history_window: number;
            /**
             * Prominence Pct
             * @description Prominence percents to find peaks
             * @default 0.015
             */
            prominence_pct: number;
            /**
             * Distance
             * @description Distance of neighbor points to find peaks
             * @default 5
             */
            distance: number;
            /**
             * Lookback Period
             * @description Lookback period for candlestick patterns
             * @default 5
             */
            lookback_period: number;
            /**
             * Num Top Patterns
             * @description Number of top patterns to recognize
             * @default 4
             */
            num_top_patterns: number;
            /**
             * Top Patterns
             * @description Top patterns recognized
             */
            top_patterns: components["schemas"]["PatternObj"][];
        };
        /**
         * PerformanceFilterWeights
         * @description Weights for performance metrics used in filtering.
         */
        PerformanceFilterWeights: {
            /**
             * Num Trades
             * @default 0
             */
            num_trades: number;
            /**
             * Total Return Pct
             * @default 0
             */
            total_return_pct: number;
            /**
             * Max Drawdown Pct
             * @default 0
             */
            max_drawdown_pct: number;
            /**
             * Win Rate Pct
             * @default 0
             */
            win_rate_pct: number;
            /**
             * Profit Factor
             * @default 0
             */
            profit_factor: number;
            /**
             * Sharpe Ratio
             * @default 0
             */
            sharpe_ratio: number;
            /**
             * Sortino Ratio
             * @default 0
             */
            sortino_ratio: number;
            /**
             * Annual Return Stability
             * @default 0
             */
            annual_return_stability: number;
            /**
             * Cagr
             * @default 0
             */
            cagr: number;
        };
        /**
         * PerformanceHardConstraints
         * @description Hard constraints for performance metrics.
         */
        PerformanceHardConstraints: {
            /**
             * Num Trades
             * @default [
             *       null,
             *       null
             *     ]
             */
            num_trades: [
                number | null,
                number | null
            ];
            /**
             * Total Return Pct
             * @default [
             *       null,
             *       null
             *     ]
             */
            total_return_pct: [
                number | null,
                number | null
            ];
            /**
             * Max Drawdown Pct
             * @default [
             *       null,
             *       null
             *     ]
             */
            max_drawdown_pct: [
                number | null,
                number | null
            ];
            /**
             * Win Rate Pct
             * @default [
             *       null,
             *       null
             *     ]
             */
            win_rate_pct: [
                number | null,
                number | null
            ];
            /**
             * Profit Factor
             * @default [
             *       null,
             *       null
             *     ]
             */
            profit_factor: [
                number | null,
                number | null
            ];
            /**
             * Sharpe Ratio
             * @default [
             *       null,
             *       null
             *     ]
             */
            sharpe_ratio: [
                number | null,
                number | null
            ];
            /**
             * Sortino Ratio
             * @default [
             *       null,
             *       null
             *     ]
             */
            sortino_ratio: [
                number | null,
                number | null
            ];
            /**
             * Annual Return Stability
             * @default [
             *       null,
             *       null
             *     ]
             */
            annual_return_stability: [
                number | null,
                number | null
            ];
            /**
             * Cagr
             * @default [
             *       null,
             *       null
             *     ]
             */
            cagr: [
                number | null,
                number | null
            ];
        };
        /**
         * PerformanceMetrics
         * @description Performance metrics for trading strategies.
         */
        PerformanceMetrics: {
            /**
             * Num Trades
             * @default 0
             */
            num_trades: number;
            /**
             * Total Return Pct
             * @default 0
             */
            total_return_pct: number;
            /**
             * Max Drawdown Pct
             * @default 0
             */
            max_drawdown_pct: number;
            /**
             * Win Rate Pct
             * @default 0
             */
            win_rate_pct: number;
            /**
             * Profit Factor
             * @default 0
             */
            profit_factor: number;
            /**
             * Sharpe Ratio
             * @default 0
             */
            sharpe_ratio: number;
            /**
             * Sortino Ratio
             * @default 0
             */
            sortino_ratio: number;
            /**
             * Annual Return Stability
             * @default 0
             */
            annual_return_stability: number;
            /**
             * Cagr
             * @default 0
             */
            cagr: number;
        };
        /**
         * PersonalPreferPart
         * @description Personal preferences profile part.
         */
        PersonalPreferPart: {
            /**
             * Preferred Sectors
             * @description Preferred sectors (eg: ['TECH', 'HEALTHCARE']).
             */
            preferred_sectors?: string[] | null;
            /**
             * Excluded Sectors
             * @description Sectors you want to exclude.
             */
            excluded_sectors?: string[] | null;
            /**
             * Ethical Investing
             * @description Prefer ethical investing (ESG) criteria.
             * @default false
             */
            ethical_investing: boolean;
        };
        /**
         * PriceDataPoint
         * @description A single price data point.
         */
        PriceDataPoint: {
            /** Open */
            open?: number | null;
            /** High */
            high?: number | null;
            /** Low */
            low?: number | null;
            /** Close */
            close?: number | null;
            /** Volume */
            volume?: number | null;
            /**
             * Timestamp
             * @description Unix timestamp (seconds) for the start of the day (UTC).
             */
            timestamp: number;
        };
        /**
         * PriceResponse
         * @description Response schema for price data.
         */
        PriceResponse: {
            /** @description Metadata of a ticker */
            metadata: components["schemas"]["TickerMetadata"];
            /**
             * Datas
             * @description Daily data or intraday data
             */
            datas: components["schemas"]["PriceDataPoint"][];
        };
        /**
         * ProfileCreateRequest
         * @description Request schema for creating a new investment profile.
         */
        ProfileCreateRequest: {
            /**
             * Profile Name
             * @description Name of profile
             */
            profile_name: string;
            /**
             * Description
             * @description Short description about this profile
             */
            description: string;
            risk_tolerance: components["schemas"]["RiskTolerancePart"];
            invest_goal: components["schemas"]["InvestGoalPart"];
            knowledge_exp: components["schemas"]["KnowledgeExpPart"];
            capital_income: components["schemas"]["CapitalIncomePart"];
            personal_prefer: components["schemas"]["PersonalPreferPart"];
            /**
             * Use In Advisor
             * @description Allow Advisor to use this profile to personalize advice.
             * @default true
             */
            use_in_advisor: boolean;
            /**
             * Is Default
             * @description Set as default profile.
             * @default false
             */
            is_default: boolean;
        };
        /**
         * ProfileRequest
         * @description Request schema for investment profile operations.
         */
        ProfileRequest: {
            /**
             * Profile Name
             * @description Name of profile
             */
            profile_name: string;
            /**
             * Description
             * @description Short description about this profile
             */
            description: string;
            risk_tolerance: components["schemas"]["RiskTolerancePart"];
            invest_goal: components["schemas"]["InvestGoalPart"];
            knowledge_exp: components["schemas"]["KnowledgeExpPart"];
            capital_income: components["schemas"]["CapitalIncomePart"];
            personal_prefer: components["schemas"]["PersonalPreferPart"];
            /**
             * Use In Advisor
             * @description Allow Advisor to use this profile to personalize advice.
             * @default true
             */
            use_in_advisor: boolean;
            /**
             * Is Default
             * @description Set as default profile.
             * @default false
             */
            is_default: boolean;
            /** Profile Id */
            profile_id: string;
            /** User Id */
            user_id: string;
            /** Created At Ts */
            created_at_ts: number;
            /** Updated At Ts */
            updated_at_ts: number;
        };
        /**
         * ProfileResponse
         * @description Response schema for investment profile data.
         */
        ProfileResponse: {
            /**
             * Profile Name
             * @description Name of profile
             */
            profile_name: string;
            /**
             * Description
             * @description Short description about this profile
             */
            description: string;
            risk_tolerance: components["schemas"]["RiskTolerancePart"];
            invest_goal: components["schemas"]["InvestGoalPart"];
            knowledge_exp: components["schemas"]["KnowledgeExpPart"];
            capital_income: components["schemas"]["CapitalIncomePart"];
            personal_prefer: components["schemas"]["PersonalPreferPart"];
            /**
             * Use In Advisor
             * @description Allow Advisor to use this profile to personalize advice.
             * @default true
             */
            use_in_advisor: boolean;
            /**
             * Is Default
             * @description Set as default profile.
             * @default false
             */
            is_default: boolean;
            /** Profile Id */
            profile_id: string;
            /** User Id */
            user_id: string;
            /** Created At Ts */
            created_at_ts: number;
            /** Updated At Ts */
            updated_at_ts: number;
        };
        /**
         * ProfileUpdateRequest
         * @description Request schema for updating an existing investment profile.
         */
        ProfileUpdateRequest: {
            /** Profile Name */
            profile_name?: string | null;
            /** Description */
            description?: string | null;
            risk_tolerance?: components["schemas"]["RiskTolerancePart"] | null;
            invest_goal?: components["schemas"]["InvestGoalPart"] | null;
            knowledge_exp?: components["schemas"]["KnowledgeExpPart"] | null;
            capital_income?: components["schemas"]["CapitalIncomePart"] | null;
            personal_prefer?: components["schemas"]["PersonalPreferPart"] | null;
            /** Use In Advisor */
            use_in_advisor?: boolean | null;
            /** Is Default */
            is_default?: boolean | null;
        };
        /**
         * QuantitivePreferencesConfigRequest
         * @description Request schema for quantitative preferences configuration.
         */
        QuantitivePreferencesConfigRequest: {
            weights: components["schemas"]["PerformanceFilterWeights"];
            constraints: components["schemas"]["PerformanceHardConstraints"];
            modifiers: components["schemas"]["BehaviorModifiers"];
        };
        /**
         * QuantitivePreferencesConfigResponse
         * @description Response schema for quantitative preferences configuration.
         */
        QuantitivePreferencesConfigResponse: {
            weights: components["schemas"]["PerformanceFilterWeights"];
            constraints: components["schemas"]["PerformanceHardConstraints"];
            modifiers: components["schemas"]["BehaviorModifiers"];
        };
        /**
         * QuickCheckReportResponse
         * @description Response schema for quick check analysis reports.
         */
        QuickCheckReportResponse: {
            /**
             * Ticker
             * @description Symbol of ticker
             */
            ticker: string;
            /**
             * Generated At Utc
             * @description ISO format string of generated time
             */
            generated_at_utc: string;
            /**
             * Generated Timestamp
             * @description Timestamp value of generated time
             */
            generated_timestamp: number;
            /** @description Technical Report */
            technical_report: components["schemas"]["TechnicalReport"];
            /** @description Forecasting report */
            forecasting_report: components["schemas"]["ForecastingReport"];
            /** @description News report */
            news_report: components["schemas"]["NewsAnalysisReport"];
        };
        /**
         * RelevantNewsPoint
         * @description A single relevant news item.
         */
        RelevantNewsPoint: {
            /** News Uuid */
            news_uuid: string;
            /** Title */
            title: string;
            /** Summary */
            summary?: string | null;
            /** Provider */
            provider?: string | null;
            /** Link */
            link?: string | null;
            /** Publish Ts */
            publish_ts?: number | null;
            /** Collect Ts */
            collect_ts: number;
        };
        /**
         * RelevantNewsResponse
         * @description Response schema for relevant news.
         */
        RelevantNewsResponse: {
            /** @description Metadata of a ticker */
            metadata: components["schemas"]["TickerMetadata"];
            /**
             * Datas
             * @description News items
             */
            datas: components["schemas"]["RelevantNewsPoint"][];
        };
        /**
         * RiskTolerancePart
         * @description Risk tolerance profile part.
         */
        RiskTolerancePart: {
            /**
             * Risk Appetite
             * @description Overall risk tolerance
             * @enum {string}
             */
            risk_appetite: "very_conservative" | "conservative" | "moderate" | "aggressive" | "very_aggressive";
            /**
             * Loss Reaction
             * @description Typical reaction when the market drops sharply.
             * @enum {string}
             */
            loss_reaction: "panic_sell" | "reduce_exposure" | "hold_and_wait" | "buy_the_dip";
        };
        /**
         * RuleResponse
         * @description Schema for data OUTPUT after successfully creating a Rule.
         */
        RuleResponse: {
            /** Rule Id */
            rule_id: string;
            /** Name */
            name: string;
            purpose: components["schemas"]["SemanticType"];
            rule_status: components["schemas"]["RuleStatus"];
            /** Created At Ts */
            created_at_ts: number;
            root: components["schemas"]["NodeEntity"];
            metrics?: components["schemas"]["PerformanceMetrics"] | null;
        };
        /**
         * RuleStatus
         * @description Status of a rule.
         * @enum {string}
         */
        RuleStatus: "READY" | "EVOLVING" | "DEPRECATED";
        /**
         * SHAPExplaination
         * @description SHAP explanation for a specific target.
         */
        SHAPExplaination: {
            /**
             * For Target
             * @description Name of target
             */
            for_target: string;
            /** @description Explanation for this target */
            explaination: components["schemas"]["BaseSHAPExplaination"];
        };
        /**
         * SRIdentifyLevelObj
         * @description Support/Resistance level identification object.
         */
        SRIdentifyLevelObj: {
            /**
             * Level
             * @description Level value of support/resistance identification
             */
            level: number;
            /**
             * Source
             * @description Source of the level value of support/resistance identification
             */
            source: string;
        };
        /**
         * SRReport
         * @description Support/Resistance report.
         */
        SRReport: {
            /**
             * History Window
             * @description History window for identifying levels
             * @default 90
             */
            history_window: number;
            /**
             * Supports
             * @description Support points
             */
            supports: components["schemas"]["SRIdentifyLevelObj"][];
            /**
             * Resistances
             * @description Resistance points
             */
            resistances: components["schemas"]["SRIdentifyLevelObj"][];
        };
        /**
         * SectorMetadataResponse
         * @description Response schema for sector metadata.
         */
        SectorMetadataResponse: {
            /** Sector Code */
            sector_code: string;
            /** Sector Name */
            sector_name: string;
        };
        /**
         * SemanticType
         * @description Defines semantic types for values in rule trees.
         *     This is the heart of Strongly Typed Genetic Programming (STGP).
         * @enum {string}
         */
        SemanticType: "NUMERICAL" | "BOOLEAN" | "PRICE" | "PERCENTAGE" | "FINANCIAL_RATIO" | "MOMENTUM" | "TREND" | "VOLATILITY" | "VOLUME" | "SENTIMENT" | "FORECAST_PROB" | "DECISION_SIGNAL" | "RISK_LEVEL" | "OPPORTUNITY_RATING" | "ANY" | "ANY_NUMERIC";
        /**
         * SentimentAnalysisReport
         * @description Sentiment analysis results.
         */
        SentimentAnalysisReport: {
            /**
             * Label
             * @description Label of sentiment
             * @enum {string}
             */
            label: "negative" | "neutral" | "positive";
            /**
             * Score
             * @description Score of sentiment
             */
            score: number;
        };
        /**
         * SingleNewsAnalysisReport
         * @description Analysis report for a single news item.
         */
        SingleNewsAnalysisReport: {
            /**
             * Text
             * @description Text to analyze
             */
            text: string;
            /** @description Sentiment Analysis Report */
            sentiment_analysis: components["schemas"]["SentimentAnalysisReport"];
            /** @description NER Report */
            ner: components["schemas"]["NERReport"];
            /** @description Impact Assessment Report */
            impact_assessment: components["schemas"]["ImpactAssessmentReport"];
            /** @description Keyword Highlighting Evidence */
            keyword_highlighting_evidence: components["schemas"]["KeywordHighlightingReport"];
        };
        /**
         * SingleTaskForecastReport
         * @description Forecast report for a single task.
         */
        SingleTaskForecastReport: {
            /**
             * Task Name
             * @description Identifier of task
             */
            task_name: string;
            /**
             * Task Metadata
             * @description Metadata of task.
             */
            task_metadata: components["schemas"]["TripleBarrierTaskMetadata"] | components["schemas"]["NDaysDistributionTaskMetadata"];
            /**
             * Prediction
             * @description Model forecast results (in percent form multiplied by 100).
             */
            prediction: number[];
            /**
             * Units
             * @description Units of prediction
             * @enum {string}
             */
            units: "percent" | "category";
            /**
             * Evidence
             * @description Evidence by SHAP
             */
            evidence: components["schemas"]["SHAPExplaination"][];
        };
        /**
         * SummaryReport
         * @description Summary of news analysis results.
         */
        SummaryReport: {
            /** Num Positive Sentiment */
            num_positive_sentiment: number;
            /** Num Negative Sentiment */
            num_negative_sentiment: number;
            /** Num High Impact */
            num_high_impact: number;
            /** Num Moderate Impact */
            num_moderate_impact: number;
            /** Num Low Impact */
            num_low_impact: number;
            /** Avg Of Positive Keyword Found */
            avg_of_positive_keyword_found: number;
            /** Avg Of Negative Keyword Found */
            avg_of_negative_keyword_found: number;
            /** Avg Of Ner Found */
            avg_of_ner_found: number;
        };
        /**
         * TechnicalReport
         * @description Complete technical analysis report combining daily and intraday analysis.
         */
        TechnicalReport: {
            /**
             * Report Type
             * @description Decide which analysis type will be chosen
             * @default all
             * @enum {string}
             */
            report_type: "daily" | "intraday" | "all";
            /** @description Daily Analysis Report */
            daily_report: components["schemas"]["DailyAnalysisReport"] | null;
            /** @description Intraday Analysis Report */
            intraday_report: components["schemas"]["IntradayAnalysisReport"] | null;
        };
        /**
         * TechnicalReportResponse
         * @description Response schema for technical analysis reports.
         */
        TechnicalReportResponse: {
            /**
             * Report Type
             * @description Decide which analysis type will be chosen
             * @default all
             * @enum {string}
             */
            report_type: "daily" | "intraday" | "all";
            /** @description Daily Analysis Report */
            daily_report: components["schemas"]["DailyAnalysisReport"] | null;
            /** @description Intraday Analysis Report */
            intraday_report: components["schemas"]["IntradayAnalysisReport"] | null;
        };
        /**
         * TickerMetadata
         * @description Metadata for a ticker symbol.
         */
        TickerMetadata: {
            /** Ticker */
            ticker: string;
            /** Company Name */
            company_name?: string | null;
            /** Exchange Code */
            exchange_code: string;
            /** Currency */
            currency: string;
            /** Timezone */
            timezone: string;
            /** Sector Name */
            sector_name: string;
            /**
             * Data Type
             * @enum {string}
             */
            data_type: "daily" | "intraday" | "news";
        };
        /**
         * TopFeature
         * @description Top feature information for SHAP explanation.
         */
        TopFeature: {
            /**
             * Feature
             * @description Name of related features
             */
            feature: string;
            /**
             * Value
             * @description Real value of feature at forecasting time
             */
            value: number;
            /**
             * Contribution
             * @description SHAP value, indicating the magnitude and direction of the influence.
             */
            contribution: number;
            /**
             * Effect
             * @description Direction of effect
             * @enum {string}
             */
            effect: "positive" | "negative";
        };
        /**
         * TrendReport
         * @description Complete trend analysis report.
         */
        TrendReport: {
            /**
             * Primary Focus
             * @description Primary focus of analysis
             * @default mid_term
             * @enum {string}
             */
            primary_focus: "mid-term" | "long-term";
            /** @description Mid-Term Trend Report */
            midterm_report: components["schemas"]["MidTermTrendReport"];
            /** @description Long-Term Trend Report */
            longterm_report: components["schemas"]["LongTermTrendReport"];
            /** @description Overall strength */
            overall_strength: components["schemas"]["OverallStrengthTrendReport"];
        };
        /**
         * TriggeredRuleInfo
         * @description Summary information about a triggered rule.
         *     'Triggered' means the rule returned a non-zero score.
         */
        TriggeredRuleInfo: {
            /**
             * Rule Id
             * @description ID of the rule.
             */
            rule_id: string;
            /**
             * Name
             * @description Human-readable name of the rule.
             */
            name: string;
            /**
             * Score
             * @description Normalized score returned by the rule.
             */
            score: number;
            /**
             * Purpose
             * @description Purpose of the rule, e.g., 'DECISION_SIGNAL'.
             */
            purpose: string;
        };
        /**
         * TripleBarrierTaskMetadata
         * @description Metadata for triple barrier task.
         */
        TripleBarrierTaskMetadata: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            problem_id: "triple-barrier";
            /**
             * Targets
             * @description Targets of task, need to plain, example target_tb_15d_2tp_1sl
             */
            targets: string[];
            /**
             * Units
             * @description Units of target
             */
            units: string;
            /**
             * Horizon
             * @description Horizon to meet timeout
             */
            horizon: number;
            /**
             * Tp Pct
             * @description TP percent to win, example 0.02 is meaning 1.02 multiplier of current price
             */
            tp_pct: number;
            /**
             * Sl Pct
             * @description SL percent to loss, example 0.02 is 0.98 multiplier of current price
             */
            sl_pct: number;
        };
        /**
         * UniversalNewsPoint
         * @description A universal news item with additional keyword information.
         */
        UniversalNewsPoint: {
            /** News Uuid */
            news_uuid: string;
            /** Title */
            title: string;
            /** Summary */
            summary?: string | null;
            /** Provider */
            provider?: string | null;
            /** Link */
            link?: string | null;
            /** Publish Ts */
            publish_ts?: number | null;
            /** Collect Ts */
            collect_ts: number;
            /** Keyword */
            keyword: string;
            /** Title Hash */
            title_hash: string;
        };
        /**
         * UniversalNewsResponse
         * @description Response schema for universal news.
         */
        UniversalNewsResponse: {
            /**
             * Datas
             * @description Universal news items
             */
            datas: components["schemas"]["UniversalNewsPoint"][];
        };
        /**
         * UserResponse
         * @description Response schema for user data.
         */
        UserResponse: {
            /**
             * Email
             * Format: email
             */
            email: string;
            /** Full Name */
            full_name?: string | null;
            /** Avatar Url */
            avatar_url?: string | null;
            /** User Id */
            user_id: string;
            /** Google Id */
            google_id: string;
            /** Is Active */
            is_active: boolean;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_daily_prices_api_v1_market_tickers__ticker__prices_daily_get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
            };
            header?: never;
            path: {
                ticker: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PriceResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_daily_prices_by_sector_api_v1_market_sectors__sector__prices_daily_get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
            };
            header?: never;
            path: {
                sector: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PriceResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_intraday_prices_api_v1_market_tickers__ticker__prices_intraday_get: {
        parameters: {
            query?: {
                latest_only?: boolean;
            };
            header?: never;
            path: {
                ticker: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PriceResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_relevant_news_api_v1_market_tickers__ticker__news_get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
            };
            header?: never;
            path: {
                ticker: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RelevantNewsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_universal_news_api_v1_market_news_universal_get: {
        parameters: {
            query: {
                search_terms: string;
                skip?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UniversalNewsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_all_sectors_api_v1_metadata_sectors_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SectorMetadataResponse"][];
                };
            };
        };
    };
    get_ai_full_quick_analysis_api_v1_analysis_quick__ticker__full_get: {
        parameters: {
            query?: {
                daily_analysis_type?: "short" | "medium" | "long";
                required_type?: "daily" | "intraday" | "all";
            };
            header?: never;
            path: {
                ticker: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QuickCheckReportResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_ai_technical_quick_analysis_api_v1_analysis_quick__ticker__technical_get: {
        parameters: {
            query?: {
                daily_analysis_type?: "short" | "medium" | "long";
                required_type?: "daily" | "intraday" | "all";
            };
            header?: never;
            path: {
                ticker: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TechnicalReportResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_ai_forecasting_quick_analysis_api_v1_analysis_quick__ticker__forecasting_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                ticker: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForecastingReportResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_ai_news_quick_analysis_api_v1_analysis_quick__ticker__news_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                ticker: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NewsReportResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_ai_quick_analysis_plain_api_v1_analysis_quick__ticker__explain_get: {
        parameters: {
            query?: {
                daily_analysis_type?: "short" | "medium" | "long";
                required_type?: "daily" | "intraday" | "all";
                explain_type?: "technical" | "news" | "forecasting" | "all";
            };
            header?: never;
            path: {
                ticker: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_ai_full_quick_advisor_api_v1_advisor_quick__ticker__full_post: {
        parameters: {
            query?: {
                limit?: number;
            };
            header?: never;
            path: {
                ticker: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["QuantitivePreferencesConfigRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdvisorResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_ai_full_quick_advisor_explain_api_v1_advisor_quick__ticker__explain_post: {
        parameters: {
            query?: {
                limit?: number;
            };
            header?: never;
            path: {
                ticker: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["QuantitivePreferencesConfigRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_ai_single_rule_explain_api_v1_rules__rule_id__explain_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                rule_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExplainationRuleResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_ai_ready_rules_api_v1_rules_get: {
        parameters: {
            query?: {
                purpose?: components["schemas"]["SemanticType"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RuleResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_ai_nodes_api_v1_rules_nodes_get: {
        parameters: {
            query?: {
                node_type?: components["schemas"]["NodeType"];
                purpose?: components["schemas"]["SemanticType"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NodeResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    google_login_api_v1_auth_google_login_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthorizationURLResponse"];
                };
            };
        };
    };
    google_callback_api_v1_auth_google_callback_get: {
        parameters: {
            query: {
                code: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_me_api_v1_users_me_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
        };
    };
    get_user_profiles_api_v1_profiles_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProfileResponse"][];
                };
            };
        };
    };
    create_user_profile_api_v1_profiles_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProfileCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProfileResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_profile_details_api_v1_profiles__profile_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                profile_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProfileResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_user_profile_api_v1_profiles__profile_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                profile_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProfileUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProfileResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_user_profile_api_v1_profiles__profile_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                profile_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProfileResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_ai_suggest_config_api_v1_personal_suggested_config_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProfileRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QuantitivePreferencesConfigResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
