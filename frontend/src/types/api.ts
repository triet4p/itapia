/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/market/tickers/{ticker}/prices/daily": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Daily Prices
         * @description API endpoint để lấy dữ liệu giá lịch sử hàng ngày cho một mã cổ phiếu.
         */
        get: operations["get_daily_prices_api_v1_market_tickers__ticker__prices_daily_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/market/sectors/{sector}/prices/daily": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Daily Prices By Sector
         * @description API endpoint để lấy dữ liệu giá hàng ngày cho tất cả các cổ phiếu trong một nhóm ngành.
         */
        get: operations["get_daily_prices_by_sector_api_v1_market_sectors__sector__prices_daily_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/market/tickers/{ticker}/prices/intraday": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Intraday Prices
         * @description API endpoint để lấy toàn bộ lịch sử giá trong ngày (giới hạn bởi stream) của một cổ phiếu.
         */
        get: operations["get_intraday_prices_api_v1_market_tickers__ticker__prices_intraday_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/market/tickers/{ticker}/news": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Relevant News
         * @description API endpoint để lấy danh sách các tin tức gần đây cho một mã cổ phiếu.
         */
        get: operations["get_relevant_news_api_v1_market_tickers__ticker__news_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/market/news/universal": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Universal News
         * @description API endpoint để lấy danh sách các tin tức gần đây cho một mã cổ phiếu.
         */
        get: operations["get_universal_news_api_v1_market_news_universal_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/metadata/sectors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get All Sectors
         * @description API endpoint để lấy danh sách tất cả các nhóm ngành được hỗ trợ.
         */
        get: operations["get_all_sectors_api_v1_metadata_sectors_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/analysis/quick/{ticker}/full": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Ai Full Quick Analysis */
        get: operations["get_ai_full_quick_analysis_api_v1_analysis_quick__ticker__full_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/analysis/quick/{ticker}/technical": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Ai Technical Quick Analysis */
        get: operations["get_ai_technical_quick_analysis_api_v1_analysis_quick__ticker__technical_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/analysis/quick/{ticker}/forecasting": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Ai Forecasting Quick Analysis */
        get: operations["get_ai_forecasting_quick_analysis_api_v1_analysis_quick__ticker__forecasting_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/analysis/quick/{ticker}/news": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Ai News Quick Analysis */
        get: operations["get_ai_news_quick_analysis_api_v1_analysis_quick__ticker__news_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/analysis/quick/{ticker}/explain": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Ai Quick Analysis Plain */
        get: operations["get_ai_quick_analysis_plain_api_v1_analysis_quick__ticker__explain_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/advisor/quick/{ticker}/full": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Ai Full Quick Advisor */
        get: operations["get_ai_full_quick_advisor_api_v1_advisor_quick__ticker__full_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/advisor/quick/{ticker}/explain": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Ai Full Quick Advisor Explain */
        get: operations["get_ai_full_quick_advisor_explain_api_v1_advisor_quick__ticker__explain_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/rules/{rule_id}/explain": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Ai Single Rule Explain */
        get: operations["get_ai_single_rule_explain_api_v1_rules__rule_id__explain_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/rules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Ai Active Rules */
        get: operations["get_ai_active_rules_api_v1_rules_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/rules/nodes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Ai Nodes */
        get: operations["get_ai_nodes_api_v1_rules_nodes_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read Root */
        get: operations["read_root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * AdvisorReportSchema
         * @description Schema cho báo cáo tổng hợp cuối cùng từ Advisor Module.
         *     Đây là "hợp đồng" dữ liệu chính, được sử dụng cả trong nội bộ
         *     và trả về cho API trong giai đoạn MVP.
         */
        AdvisorReportSchema: {
            /** @description Khuyến nghị Quyết định cuối cùng. */
            final_decision: components["schemas"]["FinalRecommendation"];
            /** @description Đánh giá Rủi ro cuối cùng. */
            final_risk: components["schemas"]["FinalRecommendation"];
            /** @description Đánh giá Cơ hội cuối cùng. */
            final_opportunity: components["schemas"]["FinalRecommendation"];
            /** @description Các điểm số tổng hợp trước khi qua MetaRule. */
            aggregated_scores: components["schemas"]["AggregatedScoreInfo"];
            /**
             * Ticker
             * @description Mã cổ phiếu được phân tích.
             */
            ticker: string;
            /**
             * Generated At Utc
             * @description Thời gian tạo báo cáo (ISO format).
             */
            generated_at_utc: string;
            /**
             * Generated Timestamp
             * @description Generate with timestamp
             */
            generated_timestamp: number;
        };
        /**
         * AggregatedScoreInfo
         * @description Thông tin về các điểm số đã được tổng hợp từ các bộ quy tắc.
         */
        AggregatedScoreInfo: {
            /**
             * Raw Decision Score
             * @description Điểm số quyết định thô (trước khi có MetaRule).
             */
            raw_decision_score: number;
            /**
             * Raw Risk Score
             * @description Điểm số rủi ro thô (trước khi có MetaRule).
             */
            raw_risk_score: number;
            /**
             * Raw Opportunity Score
             * @description Điểm số cơ hội thô (trước khi có MetaRule).
             */
            raw_opportunity_score: number;
        };
        /** BaseSHAPExplaination */
        BaseSHAPExplaination: {
            /**
             * Base Value
             * @description Average predicted value (normalized log-odds or percent).
             */
            base_value: number;
            /**
             * Prediction Outcome
             * @description Final forecast result after adding all contributions.
             */
            prediction_outcome: number;
            /**
             * Top Features
             * @description List of most influential features.
             */
            top_features: components["schemas"]["TopFeature"][];
        };
        /** CurrentStatusReport */
        CurrentStatusReport: {
            /**
             * Vwap Status
             * @description Comparison between VWAP-D and current price
             * @enum {string}
             */
            vwap_status: "above" | "below" | "undefined";
            /**
             * Open Status
             * @description Comparison between current price and open price
             * @enum {string}
             */
            open_status: "above" | "below";
            /**
             * Rsi Status
             * @description RSI Status
             * @enum {string}
             */
            rsi_status: "overbought" | "oversold" | "neutral";
            /**
             * Evidence
             * @description A dictionary describe evidence of status analysis
             */
            evidence: {
                [key: string]: unknown;
            };
        };
        /** DailyAnalysisReport */
        DailyAnalysisReport: {
            /** @description Some important key indicators to mid-term and long-term */
            key_indicators: components["schemas"]["KeyIndicators"];
            /** @description Trend report */
            trend_report: components["schemas"]["TrendReport"];
            /** @description Support/Resistance report */
            sr_report: components["schemas"]["SRReport"];
            /** @description Pattern Report */
            pattern_report: components["schemas"]["PatternReport"];
        };
        /** ExplainationRuleResponse */
        ExplainationRuleResponse: {
            /** Rule Id */
            rule_id: string;
            /** Name */
            name: string;
            purpose: components["schemas"]["SemanticType"];
            /** Version */
            version: number;
            /** Is Active */
            is_active: boolean;
            /** Created At Ts */
            created_at_ts: number;
            root: components["schemas"]["NodeEntity"];
            /** Explain */
            explain: string;
        };
        /**
         * FinalRecommendation
         * @description Thông tin về khuyến nghị cuối cùng sau khi đã qua tất cả các tầng.
         */
        FinalRecommendation: {
            /**
             * Final Score
             * @description Điểm số cuối cùng sau khi đã tổng hợp và cá nhân hóa.
             */
            final_score: number;
            /** Purpose */
            purpose: string;
            /** Label */
            label: string;
            /**
             * Final Recommend
             * @description Final recommend
             */
            final_recommend: string;
            /**
             * Triggered Rules
             * @description Danh sách các quy tắc đã được kích hoạt và đóng góp vào kết quả.
             */
            triggered_rules: components["schemas"]["TriggeredRuleInfo"][];
        };
        /** ForecastingReport */
        ForecastingReport: {
            /**
             * Ticker
             * @description Ticker symbol for forecasting
             */
            ticker: string;
            /**
             * Sector
             * @description Sector of ticker
             */
            sector: string;
            /**
             * Forecasts
             * @description List of forecasting each single task
             */
            forecasts: components["schemas"]["SingleTaskForecastReport"][];
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** ImpactAssessmentReport */
        ImpactAssessmentReport: {
            /**
             * Level
             * @description Level of impact
             * @enum {string}
             */
            level: "low" | "moderate" | "high" | "unknown";
            /**
             * Words
             * @description List of evidence impact words
             */
            words?: string[];
        };
        /** IntradayAnalysisReport */
        IntradayAnalysisReport: {
            /** @description Status report */
            current_status_report: components["schemas"]["CurrentStatusReport"];
            /** @description Momentum report */
            momentum_report: components["schemas"]["MomentumReport"];
            /** @description Some of key levels */
            key_levels: components["schemas"]["KeyLevelsReport"];
        };
        /** KeyIndicators */
        KeyIndicators: {
            /** Sma 20 */
            sma_20: number | null;
            /** Sma 50 */
            sma_50: number | null;
            /** Sma 200 */
            sma_200: number | null;
            /** Rsi 14 */
            rsi_14: number | null;
            /** Adx 14 */
            adx_14: number | null;
            /** Dmp 14 */
            dmp_14: number | null;
            /** Dmn 14 */
            dmn_14: number | null;
            /** Bbu 20 */
            bbu_20: number | null;
            /** Bbl 20 */
            bbl_20: number | null;
            /** Atr 14 */
            atr_14: number | null;
            /** Psar */
            psar: number | null;
        };
        /** KeyLevelsReport */
        KeyLevelsReport: {
            /** Day High */
            day_high: number;
            /** Day Low */
            day_low: number;
            /** Open Price */
            open_price: number;
            /** Vwap */
            vwap: number | null;
            /** Or 30M High */
            or_30m_high: number | null;
            /** Or 30M Low */
            or_30m_low: number | null;
        };
        /** KeywordHighlightingReport */
        KeywordHighlightingReport: {
            /**
             * Positive Keywords
             * @description List of positive keyword highlighted
             */
            positive_keywords: string[];
            /**
             * Negative Keywords
             * @description List of negative keyword highlighted
             */
            negative_keywords: string[];
        };
        /** LongTermTrendReport */
        LongTermTrendReport: {
            /**
             * Ma Direction
             * @description Direction using MA indicators
             * @enum {string}
             */
            ma_direction: "uptrend" | "downtrend" | "undefined";
            /**
             * Ma Status
             * @description Status using MA indicators and latest close price
             * @enum {string}
             */
            ma_status: "positive" | "negative" | "undefined";
            /**
             * Evidence
             * @description A dictionary describe evidence of trend analysis
             */
            evidence: {
                [key: string]: unknown;
            };
        };
        /** MidTermTrendReport */
        MidTermTrendReport: {
            /**
             * Ma Direction
             * @description Direction using MA indicators
             * @enum {string}
             */
            ma_direction: "uptrend" | "downtrend" | "undefined";
            /**
             * Ma Status
             * @description Status using MA indicators and latest close price
             * @enum {string}
             */
            ma_status: "positive" | "negative" | "undefined";
            /**
             * Evidence
             * @description A dictionary describe evidence of trend analysis
             */
            evidence: {
                [key: string]: unknown;
            };
            /**
             * Adx Direction
             * @description Direction using MA indicators
             * @enum {string}
             */
            adx_direction: "uptrend" | "downtrend" | "undefined";
        };
        /** MomentumReport */
        MomentumReport: {
            /**
             * Macd Crossover
             * @description Decide relationship of MACD and Signal line
             * @enum {string}
             */
            macd_crossover: "bull" | "bear" | "neutral";
            /**
             * Volume Status
             * @description Decide if volume spike ratio > 2.0
             * @enum {string}
             */
            volume_status: "normal" | "high-spike";
            /**
             * Opening Range Status
             * @description Opening Range breakout
             * @enum {string}
             */
            opening_range_status: "bull-breakout" | "bear-breakdown" | "inside";
            /**
             * Evidence
             * @description A dictionary describe evidence of momentum analysis
             */
            evidence: {
                [key: string]: unknown;
            };
        };
        /** NDaysDistributionTaskMetadata */
        NDaysDistributionTaskMetadata: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            problem_id: "ndays-distribution";
            /**
             * Targets
             * @description Targets of task, need to plain, example target_tb_15d_2tp_1sl
             */
            targets: string[];
            /**
             * Units
             * @description Units of target
             */
            units: string;
            /**
             * Horizon
             * @description Window for look for distribution (mean/std/min/max/q25/q75)
             */
            horizon: number;
        };
        /** NERElement */
        NERElement: {
            /**
             * Entity Group
             * @description Name of entity group
             */
            entity_group: string;
            /**
             * Word
             * @description word recognized
             */
            word: string;
        };
        /** NERReport */
        NERReport: {
            /**
             * Entities
             * @description List of entity
             */
            entities: components["schemas"]["NERElement"][];
        };
        /** NewsAnalysisReport */
        NewsAnalysisReport: {
            /** Ticker */
            ticker: string;
            /** Reports */
            reports: components["schemas"]["SingleNewsAnalysisReport"][];
            summary: components["schemas"]["SummaryReport"];
        };
        /** NodeEntity */
        NodeEntity: {
            /** Node Name */
            node_name: string;
            /** Children */
            children?: components["schemas"]["NodeEntity"][] | null;
        };
        /** NodeSpecEntity */
        NodeSpecEntity: {
            /** Node Name */
            node_name: string;
            /** Description */
            description: string;
            node_type: components["schemas"]["NodeType"];
            /** @description return type of a nodes */
            return_type: components["schemas"]["SemanticType"];
            /**
             * Args Type
             * @description Argument type, only need for operator node
             */
            args_type?: components["schemas"]["SemanticType"][] | null;
        };
        /**
         * NodeType
         * @enum {string}
         */
        NodeType: "constant" | "variable" | "operator" | "any";
        /** OverallStrengthTrendReport */
        OverallStrengthTrendReport: {
            /**
             * Strength
             * @description Overall strength of trend
             * @enum {string}
             */
            strength: "strong" | "moderate" | "weak" | "undefined";
            /**
             * Value
             * @description Value of overall strength
             */
            value: number;
        };
        /** PatternObj */
        PatternObj: {
            /**
             * Name
             * @description Friendly name of patterns
             */
            name: string;
            /**
             * Pattern Type
             * @description Identify that this is chart patterns or candlestick patterns
             * @enum {string}
             */
            pattern_type: "chart" | "candlestick";
            /**
             * Sentiment
             * @description Identify the meaning of patterns is BULL or BEAR
             * @enum {string}
             */
            sentiment: "bull" | "bear" | "neutral";
            /**
             * Score
             * @description Score each pattern rewarded
             */
            score: number;
            /**
             * Confirmation Date
             * @description ISO Format string to describe confimation date of this pattern
             */
            confirmation_date: string;
            /**
             * Evidence
             * @description A dictionary describe evidence of a recognized pattern
             */
            evidence: {
                [key: string]: unknown;
            };
        };
        /** PatternReport */
        PatternReport: {
            /**
             * History Window
             * @description History window to view data
             * @default 90
             */
            history_window: number;
            /**
             * Prominence Pct
             * @description Prominence percents to find peaks
             * @default 0.015
             */
            prominence_pct: number;
            /**
             * Distance
             * @description Distance of neighbor points to find peaks
             * @default 5
             */
            distance: number;
            /**
             * Lookback Period
             * @description Lookback period for candlestick patterns
             * @default 5
             */
            lookback_period: number;
            /**
             * Num Top Patterns
             * @description Number of top patterns to recognize
             * @default 4
             */
            num_top_patterns: number;
            /**
             * Top Patterns
             * @description Top patterns recongized
             */
            top_patterns: components["schemas"]["PatternObj"][];
        };
        /** Price */
        Price: {
            /** @description metadata of a ticker */
            metadata: components["schemas"]["TickerMetadata"];
            /**
             * Datas
             * @description daily data or intraday data
             */
            datas: components["schemas"]["PriceDataPoint"][];
        };
        /** PriceDataPoint */
        PriceDataPoint: {
            /** Open */
            open?: number | null;
            /** High */
            high?: number | null;
            /** Low */
            low?: number | null;
            /** Close */
            close?: number | null;
            /** Volume */
            volume?: number | null;
            /**
             * Timestamp
             * @description Unix timestamp (seconds) for the start of the day (UTC).
             */
            timestamp: number;
        };
        /** QuickCheckAnalysisReport */
        QuickCheckAnalysisReport: {
            /**
             * Ticker
             * @description Symbol of ticker
             */
            ticker: string;
            /**
             * Generated At Utc
             * @description ISO format string of generated time
             */
            generated_at_utc: string;
            /**
             * Generated Timestamp
             * @description Timestamp value of generated time
             */
            generated_timestamp: number;
            /** @description Technical Report */
            technical_report: components["schemas"]["TechnicalReport"];
            /** @description Forecasting report */
            forecasting_report: components["schemas"]["ForecastingReport"];
            /** @description News report */
            news_report: components["schemas"]["NewsAnalysisReport"];
        };
        /** RelevantNews */
        RelevantNews: {
            /** @description metadata of a ticker */
            metadata: components["schemas"]["TickerMetadata"];
            /**
             * Datas
             * @description news
             */
            datas: components["schemas"]["RelevantNewsPoint"][];
        };
        /** RelevantNewsPoint */
        RelevantNewsPoint: {
            /** News Uuid */
            news_uuid: string;
            /** Title */
            title: string;
            /** Summary */
            summary?: string | null;
            /** Provider */
            provider?: string | null;
            /** Link */
            link?: string | null;
            /** Publish Ts */
            publish_ts?: number | null;
            /** Collect Ts */
            collect_ts: number;
        };
        /**
         * RuleResponse
         * @description Schema cho dữ liệu ĐI RA sau khi tạo Rule thành công.
         */
        RuleResponse: {
            /** Rule Id */
            rule_id: string;
            /** Name */
            name: string;
            purpose: components["schemas"]["SemanticType"];
            /** Version */
            version: number;
            /** Is Active */
            is_active: boolean;
            /** Created At Ts */
            created_at_ts: number;
            root: components["schemas"]["NodeEntity"];
        };
        /** SHAPExplaination */
        SHAPExplaination: {
            /**
             * For Target
             * @description Name of target
             */
            for_target: string;
            /** @description Explaination for this target */
            explaination: components["schemas"]["BaseSHAPExplaination"];
        };
        /** SRIdentifyLevelObj */
        SRIdentifyLevelObj: {
            /**
             * Level
             * @description Level Value of supportance/resitance identify
             */
            level: number;
            /**
             * Source
             * @description Source of the Level Value of supportance/resitance identify
             */
            source: string;
        };
        /** SRReport */
        SRReport: {
            /**
             * History Window
             * @description History window for identify level
             * @default 90
             */
            history_window: number;
            /**
             * Supports
             * @description Support points
             */
            supports: components["schemas"]["SRIdentifyLevelObj"][];
            /**
             * Resistances
             * @description Resistance points
             */
            resistances: components["schemas"]["SRIdentifyLevelObj"][];
        };
        /** SectorMetadata */
        SectorMetadata: {
            /** Sector Code */
            sector_code: string;
            /** Sector Name */
            sector_name: string;
        };
        /**
         * SemanticType
         * @description Định nghĩa các kiểu ngữ nghĩa cho các giá trị trong cây quy tắc.
         *     Điều này là trái tim của Strongly Typed Genetic Programming (STGP).
         * @enum {string}
         */
        SemanticType: "NUMERICAL" | "BOOLEAN" | "PRICE" | "PERCENTAGE" | "FINANCIAL_RATIO" | "MOMENTUM" | "TREND" | "VOLATILITY" | "VOLUME" | "SENTIMENT" | "FORECAST_PROB" | "DECISION_SIGNAL" | "RISK_LEVEL" | "OPPORTUNITY_RATING" | "ANY";
        /** SentimentAnalysisReport */
        SentimentAnalysisReport: {
            /**
             * Label
             * @description Label of sentiment
             * @enum {string}
             */
            label: "negative" | "neutral" | "positive";
            /**
             * Score
             * @description Score of sentiment
             */
            score: number;
        };
        /** SingleNewsAnalysisReport */
        SingleNewsAnalysisReport: {
            /**
             * Text
             * @description Text to analysis
             */
            text: string;
            /** @description Sentiment Analysis Report */
            sentiment_analysis: components["schemas"]["SentimentAnalysisReport"];
            /** @description NER Report */
            ner: components["schemas"]["NERReport"];
            /** @description Impact Assessment Report */
            impact_assessment: components["schemas"]["ImpactAssessmentReport"];
            /** @description Keyword Highlighting Evidence */
            keyword_highlighting_evidence: components["schemas"]["KeywordHighlightingReport"];
        };
        /** SingleTaskForecastReport */
        SingleTaskForecastReport: {
            /**
             * Task Name
             * @description Identify of task
             */
            task_name: string;
            /**
             * Task Metadata
             * @description Metadata of task.
             */
            task_metadata: components["schemas"]["TripleBarrierTaskMetadata"] | components["schemas"]["NDaysDistributionTaskMetadata"];
            /**
             * Prediction
             * @description Model forecast results (in percent form multiplied by 100).
             */
            prediction: number[];
            /**
             * Units
             * @description Units of prediction
             * @enum {string}
             */
            units: "percent" | "category";
            /**
             * Evidence
             * @description Evidence by SHAP
             */
            evidence: components["schemas"]["SHAPExplaination"][];
        };
        /** SummaryReport */
        SummaryReport: {
            /** Num Positive Sentiment */
            num_positive_sentiment: number;
            /** Num Negative Sentiment */
            num_negative_sentiment: number;
            /** Num High Impact */
            num_high_impact: number;
            /** Num Moderate Impact */
            num_moderate_impact: number;
            /** Num Low Impact */
            num_low_impact: number;
            /** Avg Of Positive Keyword Found */
            avg_of_positive_keyword_found: number;
            /** Avg Of Negative Keyword Found */
            avg_of_negative_keyword_found: number;
            /** Avg Of Ner Found */
            avg_of_ner_found: number;
        };
        /** TechnicalReport */
        TechnicalReport: {
            /**
             * Report Type
             * @description Decide which analysis type will be chosen
             * @default all
             * @enum {string}
             */
            report_type: "daily" | "intraday" | "all";
            /** @description Daily Analysis Report */
            daily_report: components["schemas"]["DailyAnalysisReport"] | null;
            /** @description Intraday Analysis Report */
            intraday_report: components["schemas"]["IntradayAnalysisReport"] | null;
        };
        /** TickerMetadata */
        TickerMetadata: {
            /** Ticker */
            ticker: string;
            /** Company Name */
            company_name?: string | null;
            /** Exchange Code */
            exchange_code: string;
            /** Currency */
            currency: string;
            /** Timezone */
            timezone: string;
            /** Sector Name */
            sector_name: string;
            /**
             * Data Type
             * @enum {string}
             */
            data_type: "daily" | "intraday" | "news";
        };
        /** TopFeature */
        TopFeature: {
            /**
             * Feature
             * @description Name of related features
             */
            feature: string;
            /**
             * Value
             * @description Real value of feature at forecasting time
             */
            value: number;
            /**
             * Contribution
             * @description SHAP value, indicating the magnitude and direction of the influence.
             */
            contribution: number;
            /**
             * Effect
             * @description Direction of effect
             * @enum {string}
             */
            effect: "positive" | "negative";
        };
        /** TrendReport */
        TrendReport: {
            /**
             * Primary Focus
             * @description Primary focus of analysis
             * @default mid_term
             * @enum {string}
             */
            primary_focus: "mid-term" | "long-term";
            /** @description Mid-Term Trend Report */
            midterm_report: components["schemas"]["MidTermTrendReport"];
            /** @description Long-Term Trend Report */
            longterm_report: components["schemas"]["LongTermTrendReport"];
            /** @description Overall strength */
            overall_strength: components["schemas"]["OverallStrengthTrendReport"];
        };
        /**
         * TriggeredRuleInfo
         * @description Thông tin tóm tắt về một quy tắc (Rule) đã được kích hoạt.
         *     'Kích hoạt' có nghĩa là quy tắc đó đã trả về một điểm số khác 0.
         */
        TriggeredRuleInfo: {
            /**
             * Rule Id
             * @description ID của quy tắc.
             */
            rule_id: string;
            /**
             * Name
             * @description Tên của quy tắc để con người đọc.
             */
            name: string;
            /**
             * Score
             * @description Điểm số mà quy tắc trả về (đã chuẩn hóa).
             */
            score: number;
            /**
             * Purpose
             * @description Mục đích của quy tắc, ví dụ: 'DECISION_SIGNAL'.
             */
            purpose: string;
        };
        /** TripleBarrierTaskMetadata */
        TripleBarrierTaskMetadata: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            problem_id: "triple-barrier";
            /**
             * Targets
             * @description Targets of task, need to plain, example target_tb_15d_2tp_1sl
             */
            targets: string[];
            /**
             * Units
             * @description Units of target
             */
            units: string;
            /**
             * Horizon
             * @description Horizon to meet timeout
             */
            horizon: number;
            /**
             * Tp Pct
             * @description TP percent to win, example 0.02 is meaning 1.02 multiplier of current price
             */
            tp_pct: number;
            /**
             * Sl Pct
             * @description SL percent to loss, example 0.02 is 0.98 multiplier of current price
             */
            sl_pct: number;
        };
        /** UniversalNews */
        UniversalNews: {
            /**
             * Datas
             * @description universal news
             */
            datas: components["schemas"]["UniversalNewsPoint"][];
        };
        /** UniversalNewsPoint */
        UniversalNewsPoint: {
            /** News Uuid */
            news_uuid: string;
            /** Title */
            title: string;
            /** Summary */
            summary?: string | null;
            /** Provider */
            provider?: string | null;
            /** Link */
            link?: string | null;
            /** Publish Ts */
            publish_ts?: number | null;
            /** Collect Ts */
            collect_ts: number;
            /** Keyword */
            keyword: string;
            /** Title Hash */
            title_hash: string;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_daily_prices_api_v1_market_tickers__ticker__prices_daily_get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
            };
            header?: never;
            path: {
                ticker: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Price"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_daily_prices_by_sector_api_v1_market_sectors__sector__prices_daily_get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
            };
            header?: never;
            path: {
                sector: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Price"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_intraday_prices_api_v1_market_tickers__ticker__prices_intraday_get: {
        parameters: {
            query?: {
                latest_only?: boolean;
            };
            header?: never;
            path: {
                ticker: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Price"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_relevant_news_api_v1_market_tickers__ticker__news_get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
            };
            header?: never;
            path: {
                ticker: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RelevantNews"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_universal_news_api_v1_market_news_universal_get: {
        parameters: {
            query: {
                search_terms: string;
                skip?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UniversalNews"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_all_sectors_api_v1_metadata_sectors_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SectorMetadata"][];
                };
            };
        };
    };
    get_ai_full_quick_analysis_api_v1_analysis_quick__ticker__full_get: {
        parameters: {
            query?: {
                daily_analysis_type?: "short" | "medium" | "long";
                required_type?: "daily" | "intraday" | "all";
            };
            header?: never;
            path: {
                ticker: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QuickCheckAnalysisReport"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_ai_technical_quick_analysis_api_v1_analysis_quick__ticker__technical_get: {
        parameters: {
            query?: {
                daily_analysis_type?: "short" | "medium" | "long";
                required_type?: "daily" | "intraday" | "all";
            };
            header?: never;
            path: {
                ticker: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TechnicalReport"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_ai_forecasting_quick_analysis_api_v1_analysis_quick__ticker__forecasting_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                ticker: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForecastingReport"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_ai_news_quick_analysis_api_v1_analysis_quick__ticker__news_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                ticker: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NewsAnalysisReport"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_ai_quick_analysis_plain_api_v1_analysis_quick__ticker__explain_get: {
        parameters: {
            query?: {
                daily_analysis_type?: "short" | "medium" | "long";
                required_type?: "daily" | "intraday" | "all";
                explain_type?: "technical" | "news" | "forecasting" | "all";
            };
            header?: never;
            path: {
                ticker: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_ai_full_quick_advisor_api_v1_advisor_quick__ticker__full_get: {
        parameters: {
            query?: {
                user_id?: string;
            };
            header?: never;
            path: {
                ticker: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdvisorReportSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_ai_full_quick_advisor_explain_api_v1_advisor_quick__ticker__explain_get: {
        parameters: {
            query?: {
                user_id?: string;
            };
            header?: never;
            path: {
                ticker: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_ai_single_rule_explain_api_v1_rules__rule_id__explain_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                rule_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExplainationRuleResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_ai_active_rules_api_v1_rules_get: {
        parameters: {
            query?: {
                purpose?: components["schemas"]["SemanticType"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RuleResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_ai_nodes_api_v1_rules_nodes_get: {
        parameters: {
            query?: {
                node_type?: components["schemas"]["NodeType"];
                purpose?: components["schemas"]["SemanticType"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NodeSpecEntity"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
